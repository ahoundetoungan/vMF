scale_x_discrete(limits = seq(0, 20, 4)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model), position = "identity", alpha = 0.3) +
scale_x_discrete(limits = seq(0, 20, 4)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model), position = "identity", alpha = 0.1) +
scale_x_discrete(limits = seq(0, 20, 4)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
## comparison
fprob    <- function(psi, sigma) {
G      <- matrix(0, 1, 1)
nm     <- 1
lambda <- 0
um     <- 0
tmp1   <- c(-Inf, 0:29)
tmp2   <- 0:30
pnorm(psi - tmp1, sd = sigma) -  pnorm(psi - tmp2, sd = sigma)
}
fmean    <- function(psi, sigma) {
G      <- matrix(0, 1, 1)
nm     <- 1
lambda <- 0
um     <- 0
c(CDatanet:::fL(um = um, lambda = lambda, sigma = sigma,
psim = psi, Gm = G, nm = 1))
}
psi      <- 9.5
m1       <- fmean(psi, sigma = 1)
m1
y        <- c(dpois(0:30, lambda = m1),
fprob(psi, 3),
dpois(0:30, lambda = m1),
fprob(psi, 2),
dpois(0:30, lambda = m1),
fprob(psi, 4))
model    <- rep(rep(c("Poisson", "New Model"), each = 31), 3)
disp     <- rep(c("Equidispersion", "Underdispersion", "Overdispersion"), each = 62)
data     <- data.frame(x = rep(0:30, 6), y = y, model = model, disp = disp)
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model), position = "identity", alpha = 0.1) +
scale_x_discrete(limits = seq(0, 30, 4)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
###########################################
plot(fprob(psi, 4))
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model), position = "identity", alpha = 0.1) +
scale_x_discrete(limits = seq(0, 30, 4)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model), position = "identity", alpha = 0.1) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
View(data)
y        <- c(fprob(psi, 3),
dpois(0:30, lambda = m1),
fprob(psi, 2),
dpois(0:30, lambda = m1),
fprob(psi, 4)
dpois(0:30, lambda = m1))
y        <- c(fprob(psi, 3),
dpois(0:30, lambda = m1),
fprob(psi, 2),
dpois(0:30, lambda = m1),
fprob(psi, 4),
dpois(0:30, lambda = m1))
model    <- rep(rep(c("Poisson", "New Model"), each = 31), 3)
disp     <- rep(c("Equidispersion", "Underdispersion", "Overdispersion"), each = 62)
data     <- data.frame(x = rep(0:30, 6), y = y, model = model, disp = disp)
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model), position = "identity", alpha = 0.1) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
model    <- rep(rep(c("New Model", "Poisson"), each = 31), 3)
disp     <- rep(c("Equidispersion", "Underdispersion", "Overdispersion"), each = 62)
data     <- data.frame(x = rep(0:30, 6), y = y, model = model, disp = disp)
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model), position = "identity", alpha = 0.1) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model, fill = model), position = "identity", alpha = 0.1) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model, fill = model), position = "identity", alpha = 0.5) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model, fill = model), position = "identity", alpha = 0.3) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
y        <- c(fprob(psi, 3),
dpois(0:30, lambda = m1),
fprob(psi, 1),
dpois(0:30, lambda = m1),
fprob(psi, 4.5),
dpois(0:30, lambda = m1))
model    <- rep(rep(c("New Model", "Poisson"), each = 31), 3)
disp     <- rep(c("Equidispersion", "Underdispersion", "Overdispersion"), each = 62)
data     <- data.frame(x = rep(0:30, 6), y = y, model = model, disp = disp)
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model, fill = model), position = "identity", alpha = 0.3) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
y        <- c(fprob(psi, 3),
dpois(0:30, lambda = m1),
fprob(psi, 1.5),
dpois(0:30, lambda = m1),
fprob(psi, 4.5),
dpois(0:30, lambda = m1))
model    <- rep(rep(c("New Model", "Poisson"), each = 31), 3)
disp     <- rep(c("Equidispersion", "Underdispersion", "Overdispersion"), each = 62)
data     <- data.frame(x = rep(0:30, 6), y = y, model = model, disp = disp)
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model, fill = model), position = "identity", alpha = 0.3) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
y        <- c(fprob(psi, 3),
dpois(0:30, lambda = m1),
fprob(psi, 1.8),
dpois(0:30, lambda = m1),
fprob(psi, 4.2),
dpois(0:30, lambda = m1))
model    <- rep(rep(c("New Model", "Poisson"), each = 31), 3)
disp     <- rep(c("Equidispersion", "Underdispersion", "Overdispersion"), each = 62)
data     <- data.frame(x = rep(0:30, 6), y = y, model = model, disp = disp)
ggplot(data = data, aes(x = x)) + theme_bw()  +
geom_bar(aes(weight = y, colour = model, fill = model), position = "identity", alpha = 0.3) +
scale_x_discrete(limits = seq(0, 30, 5)) +
facet_wrap(~disp) +
scale_fill_manual(NULL, values = c("red", "blue")) +
scale_colour_manual(NULL, values = c("red", "blue")) +
theme(legend.position = c(0.1, 0.9), axis.ticks = element_blank()) +
xlab(expression(y[i])) +
ylab("")
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
setwd("~/Dropbox/RPackages")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
spell_check("vMF")
document("vMF")
check("vMF")
spell_check("vMF")
build_vignettes("vMF")
spell_check("vMF")
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
setwd("~/Dropbox/RPackages")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
spell_check("vMF")
document("vMF")
check("vMF")
build_vignettes("vMF")
system("R CMD build vMF")
library(devtools)
?install_github
library(devtools)
install_github("ahoundetoungan/vMF", build_vignettes = T)
library(vMF)
library(movMF)
n      <- 5 # Number of draws
set.seed(123)
xvMF   <- rvMF(n,c(1,0,0))
set.seed(123)
xmovMF <- rmovMF(n,c(1,0,0))
all.equal(c(xvMF), c(xmovMF))
xvMF
xmovMF
n      <- 30
set.seed(123)
ddpcr::quiet(runif(n))
xvMF   <- rvMF(n,c(1,0,0))
set.seed(123)
xmovMF <- rmovMF(n,c(1,0,0))
all.equal(c(xvMF), c(xmovMF))
xvMF[1:5,]
xmovMF[1:5,]
library(rbenchmark)
fcompare <- function(n) {
benchmark("vMF" = rvMF(n,c(1,0,0)), "movMF" = rmovMF(1,c(1,0,0)))
}
fcompare(1)
fcompare(10)
fcompare(100)
out  <- unlist(lapply(1:200, function(x) fcompare(x)$elapsed[1]/fcompare(x)$elapsed[2]))
summary(out)
library(ggplot2)
ggplot(data = data.frame(n = 1:200, time = out), aes(x = n, y = time)) +
geom_point(col = "blue") + geom_hline(yintercept = 1, col = 2)
set.seed(123)
P                  <- 4
initial            <- rmovMF(1, rep(0, P))
# Fonction based on vMF to simulate theta
SamplevMF          <- function(n) {
output           <- matrix(0, n + 1, P)
output[1, ]      <- initial
for (i in 1:n) {
output[i + 1,] <- rvMF(1, output[i,])
}
return(output)
}
# Fonction based on movMF to simulate theta
SamplemovMF        <-function(n){
output           <- matrix(0, n + 1, P)
output[1, ]      <- initial
for (i in 1:n) {
output[i + 1,] <- rmovMF(1, output[i,])
}
return(output)
}
outbench <- benchmark("vMF" = SamplevMF(1000), "movMF" = SamplemovMF(1000))
save(out, outbench, file = "vMF/vignettes/out.Rdata")
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
setwd("~/Dropbox/RPackages")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
spell_check("vMF")
document("vMF")
build_vignettes("vMF")
system("R CMD build vMF")
install_github("ahoundetoungan/vMF", build_vignettes = T)
library(vMF)
z <- rvMF(1000,c(1,0))
dvMF(z,c(1,0))
50*303
source("~/Dropbox/RPackages/vMF/vMF/R/dvMF.R", echo=TRUE)
dvMF(z,c(1,0))
Rcpp::sourceCpp("src/vMF.cpp")
dvMF(z,c(1,0))
dvMF(c(0,1,0,0),c(0,3,0,0))
rvMF(1000,c(1,0))
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
library(usethis)
proot <- c("~/Dropbox/RPackages/vMF")
root  <- sapply(proot, dir.exists)
root  <- proot[root][1]
setwd(root)
roxygenise("vMF")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
document("vMF")
system("R CMD build vMF")
system("R CMD INSTALL vMF_0.0.1.tar.gz")
system("R CMD check --as-cran vMF_0.0.1.tar.gz")
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
library(usethis)
proot <- c("~/Dropbox/RPackages/vMF")
root  <- sapply(proot, dir.exists)
root  <- proot[root][1]
setwd(root)
#RcppArmadillo.package.skeleton("vMF")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
# use_build_ignore(c("doc", "Meta", "test", ".travis.yml", ".gitignore", ".Rbuildignore", ".Rhistory",
#                    "vMF.Rproj, README.md",  "vignettes/.gitignore", "scr/*.so", "scr/*.o",
#                    "datavignettes"))
document("vMF")
# check("vMF")
# spell_check("vMF")
# check_rhub("vMF")
# check_win_devel(pkg = "vMF")
# check_win_release(pkg = "vMF")
# check_win_oldrelease(pkg = "vMF")
# check_mac_release(pkg = "vMF")
# folder <- "vMF/R/"
# sapply(list.files(folder), function(x) tools::showNonASCIIfile(paste0(folder, x)))
# tools::showNonASCIIfile("vMF/DESCRIPTION")
#Sys.setenv(PATH = paste("C:/R/rtools40/usr/bin", Sys.getenv("PATH"), sep=";"))
system("R CMD build vMF")
system("R CMD check --as-cran vMF_0.0.1.tar.gz")
system("R CMD INSTALL vMF_0.0.1.tar.gz")
# knitr::write_bib(c('knitr', 'Rcpp',  'Formula',
#                    'formula.tools', 'ddpcr', 'Matrix',
#                    'RcppArmadillo', 'RcppProgress',
#                    'microbenchmark', 'ggplot2', 'devtools',
#                    'doParallel'),
#                  'Documentation/Packages.bib', width = 60)
build_vignettes("vMF", install = FALSE)
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
library(usethis)
proot <- c("~/Dropbox/RPackages/vMF")
root  <- sapply(proot, dir.exists)
root  <- proot[root][1]
setwd(root)
#RcppArmadillo.package.skeleton("vMF")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
# use_build_ignore(c("doc", "Meta", "test", ".travis.yml", ".gitignore", ".Rbuildignore", ".Rhistory",
#                    "vMF.Rproj, README.md",  "vignettes/.gitignore", "scr/*.so", "scr/*.o",
#                    "datavignettes"))
document("vMF")
# check("vMF")
# spell_check("vMF")
# check_rhub("vMF")
# check_win_devel(pkg = "vMF")
# check_win_release(pkg = "vMF")
# check_win_oldrelease(pkg = "vMF")
# check_mac_release(pkg = "vMF")
# folder <- "vMF/R/"
# sapply(list.files(folder), function(x) tools::showNonASCIIfile(paste0(folder, x)))
# tools::showNonASCIIfile("vMF/DESCRIPTION")
#Sys.setenv(PATH = paste("C:/R/rtools40/usr/bin", Sys.getenv("PATH"), sep=";"))
system("R CMD build vMF")
system("R CMD check --as-cran vMF_0.0.1.tar.gz")
system("R CMD INSTALL vMF_0.0.1.tar.gz")
#tools::showNonASCIIfile
#system("R CMD INSTALL Rd2pdf vMF --no-clean")
#system("R CMD INSTALL --build vMF_0.0.1.tar.gz")
#useDynLib(CPdetect)
#import(Rcpp)
# release("vMF")
# knitr::write_bib(c('knitr', 'Rcpp',  'Formula',
#                    'formula.tools', 'ddpcr', 'Matrix',
#                    'RcppArmadillo', 'RcppProgress',
#                    'microbenchmark', 'ggplot2', 'devtools',
#                    'doParallel'),
#                  'Documentation/Packages.bib', width = 60)
build_vignettes("vMF", install = FALSE)
check_rhub("vMF")
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
library(usethis)
proot <- c("~/Dropbox/RPackages/vMF")
root  <- sapply(proot, dir.exists)
root  <- proot[root][1]
setwd(root)
#RcppArmadillo.package.skeleton("vMF")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
# use_build_ignore(c("doc", "Meta", "test", ".travis.yml", ".gitignore", ".Rbuildignore", ".Rhistory",
#                    "vMF.Rproj, README.md",  "vignettes/.gitignore", "scr/*.so", "scr/*.o",
#                    "datavignettes"))
document("vMF")
# check("vMF")
# spell_check("vMF")
# check_rhub("vMF")
# check_win_devel(pkg = "vMF")
# check_win_release(pkg = "vMF")
# check_win_oldrelease(pkg = "vMF")
# check_mac_release(pkg = "vMF")
system("R CMD build --compact-vignettes='both' vMF")
system("R CMD check --as-cran vMF_0.0.1.tar.gz")
system("R CMD INSTALL vMF_0.0.1.tar.gz")
# knitr::write_bib(c('knitr', 'Rcpp',  'Formula',
#                    'formula.tools', 'ddpcr', 'Matrix',
#                    'RcppArmadillo', 'RcppProgress',
#                    'microbenchmark', 'ggplot2', 'devtools',
#                    'doParallel'),
#                  'Documentation/Packages.bib', width = 60)
build_vignettes("vMF", install = FALSE)
rm(list = ls())
library(RcppArmadillo)
library(Rcpp)
library(roxygen2)
library(devtools)
library(pkgbuild)
library(usethis)
proot <- c("~/Dropbox/RPackages/vMF")
root  <- sapply(proot, dir.exists)
root  <- proot[root][1]
setwd(root)
#RcppArmadillo.package.skeleton("vMF")
roxygenise("vMF")
compile_dll("vMF")
roxygenise("vMF")
compileAttributes("vMF")
# use_build_ignore(c("doc", "Meta", "test", ".travis.yml", ".gitignore", ".Rbuildignore", ".Rhistory",
#                    "vMF.Rproj, README.md",  "vignettes/.gitignore", "scr/*.so", "scr/*.o",
#                    "datavignettes"))
document("vMF")
# check("vMF")
# spell_check("vMF")
# check_rhub("vMF")
# check_win_devel(pkg = "vMF")
# check_win_release(pkg = "vMF")
# check_win_oldrelease(pkg = "vMF")
# check_mac_release(pkg = "vMF")
# folder <- "vMF/R/"
# sapply(list.files(folder), function(x) tools::showNonASCIIfile(paste0(folder, x)))
# tools::showNonASCIIfile("vMF/DESCRIPTION")
#Sys.setenv(PATH = paste("C:/R/rtools40/usr/bin", Sys.getenv("PATH"), sep=";"))
system("R CMD build --compact-vignettes='both' vMF")
system("R CMD check --as-cran vMF_0.0.1.tar.gz")
system("R CMD INSTALL vMF_0.0.1.tar.gz")
#tools::showNonASCIIfile
#system("R CMD INSTALL Rd2pdf vMF --no-clean")
#system("R CMD INSTALL --build vMF_0.0.1.tar.gz")
#useDynLib(CPdetect)
#import(Rcpp)
# release("vMF")
# knitr::write_bib(c('knitr', 'Rcpp',  'Formula',
#                    'formula.tools', 'ddpcr', 'Matrix',
#                    'RcppArmadillo', 'RcppProgress',
#                    'microbenchmark', 'ggplot2', 'devtools',
#                    'doParallel'),
#                  'Documentation/Packages.bib', width = 60)
build_vignettes("vMF", install = FALSE)
